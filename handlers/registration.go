package handlers

import (
	"strings"

	"telegram-bot-go/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type RegistrationSession struct {
	Step int
	Data models.UserProfile
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ–∞–Ω—Å–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
var registrationSessions = make(map[int64]*RegistrationSession)

// StartRegistration –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –∏–º—è/–ø—Å–µ–≤–¥–æ–Ω–∏–º.
func StartRegistration(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	registrationSessions[message.From.ID] = &RegistrationSession{
		Step: 1,
		Data: models.UserProfile{
			TelegramID: message.From.ID,
			Username:   strings.ToLower(message.From.UserName),
			Rank:       "–ò—Å",
			Team:       "–ù–∞–µ–º–Ω–∏–∫",
			Oblomki:    0,
			Piastry:    0,
			Inventory:  "–ü—É—Å—Ç–æ",
		},
	}
	reply := "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏/–∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º:"
	bot.Send(tgbotapi.NewMessage(message.Chat.ID, reply))
}

// ProcessRegistrationStep –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
func ProcessRegistrationStep(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	session, exists := registrationSessions[message.From.ID]
	if !exists {
		return
	}
	// –ï—Å–ª–∏ –Ω–∞ —à–∞–≥–µ 6 –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
	if len(message.Photo) > 0 && session.Step == 6 {
		photo := message.Photo[len(message.Photo)-1]
		session.Data.PhotoFileID = photo.FileID
		SaveUserProfile(session.Data)
		reply := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç!"
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, reply))
		delete(registrationSessions, message.From.ID)
		return
	}
	switch session.Step {
	case 1:
		session.Data.Name = strings.TrimSpace(message.Text)
		// –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏.
		if strings.EqualFold(message.From.UserName, "My_Beautifu1_Madness") {
			adminEmoji := "üè¥‚Äç‚ò†Ô∏è"
			if !strings.Contains(session.Data.Name, adminEmoji) {
				session.Data.Name = session.Data.Name + " " + adminEmoji
			}
			session.Data.IsAdmin = true
		}
		session.Step++
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—É:"))
	case 2:
		session.Data.Race = strings.TrimSpace(message.Text)
		session.Step++
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:"))
	case 3:
		session.Data.Age = strings.TrimSpace(message.Text)
		session.Step++
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –∏ –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 173.6 —Å–º\\70 –∫–≥):"))
	case 4:
		session.Data.HeightWeight = strings.TrimSpace(message.Text)
		session.Step++
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª:"))
	case 5:
		session.Data.Gender = strings.TrimSpace(message.Text)
		session.Step++
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"))
	default:
		// –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —à–∞–≥–∞.
	}
}

// resetRegistrationSessions –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∞–Ω—Å—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
func resetRegistrationSessions() {
	for id := range registrationSessions {
		delete(registrationSessions, id)
	}
}
