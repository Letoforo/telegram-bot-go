package handlers

import (
	"context"
	"fmt"
	"strings"
	"time"

	// –ò–º–ø–æ—Ä—Ç MongoDB –ø–∞–∫–µ—Ç–æ–≤.
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"

	"telegram-bot-go/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const PermanentAdminUsername = "My_Beautifu1_Madness"
const AdminEmoji = "üè¥‚Äç‚ò†Ô∏è"

// MarkUserAsAdmin –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:
// –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ is_admin.
func MarkUserAsAdmin(telegramID int64) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	filter := bson.M{"telegram_id": telegramID}
	var profile models.UserProfile
	err := userCollection.FindOne(ctx, filter).Decode(&profile)
	if err != nil {
		return err
	}
	if !strings.Contains(profile.Name, AdminEmoji) {
		profile.Name = profile.Name + " " + AdminEmoji
	}
	update := bson.M{"$set": bson.M{"is_admin": true, "name": profile.Name}}
	_, err = userCollection.UpdateOne(ctx, filter, update)
	return err
}

// IsUserAdmin –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
func IsUserAdmin(message *tgbotapi.Message) bool {
	if strings.EqualFold(message.From.UserName, PermanentAdminUsername) {
		return true
	}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	filter := bson.M{"telegram_id": message.From.ID}
	var profile models.UserProfile
	err := userCollection.FindOne(ctx, filter).Decode(&profile)
	return err == nil && profile.IsAdmin
}

// listProfiles –≤—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
// "–ê–π–¥–∏ –∞–Ω–∫–µ—Ç—ã, –∏–º—è, —é–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞–Ω–≥, –∫–æ–º–∞–Ω–¥–∞"
func listProfiles(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	cursor, err := userCollection.Find(ctx, bson.M{})
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç."))
		return
	}
	defer cursor.Close(ctx)
	var result strings.Builder
	for cursor.Next(ctx) {
		var profile models.UserProfile
		if err := cursor.Decode(&profile); err != nil {
			continue
		}
		result.WriteString(fmt.Sprintf("ID: %s | –ò–º—è: %s | Username: @%s | –†–∞–Ω–≥: %s | –ö–æ–º–∞–Ω–¥–∞: %s\n",
			profile.ID.Hex(), profile.Name, profile.Username, profile.Rank, profile.Team))
	}
	if result.Len() == 0 {
		result.WriteString("–ù–µ—Ç –∞–Ω–∫–µ—Ç.")
	}
	bot.Send(tgbotapi.NewMessage(message.Chat.ID, result.String()))
}

// fullListProfiles –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—É—é –∞–Ω–∫–µ—Ç—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è).
func fullListProfiles(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	cursor, err := userCollection.Find(ctx, bson.M{})
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç."))
		return
	}
	defer cursor.Close(ctx)
	for cursor.Next(ctx) {
		var profile models.UserProfile
		if err := cursor.Decode(&profile); err != nil {
			continue
		}
		caption := fmt.Sprintf(
			"–ò–º—è: %s\n–†–∞—Å–∞: %s\n–í–æ–∑—Ä–∞—Å—Ç: %s\n–†–æ—Å—Ç –∏ –≤–µ—Å: %s\n–ü–æ–ª: %s\n–†–∞–Ω–≥: %s\n–ö–æ–º–∞–Ω–¥–∞: %s\n–û–±–ª–æ–º–∫–∏: %d\n–ü–∏–∞—Å—Ç—Ä—ã: %d\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: %s",
			profile.Name, profile.Race, profile.Age, profile.HeightWeight,
			profile.Gender, profile.Rank, profile.Team, profile.Oblomki,
			profile.Piastry, profile.Inventory,
		)
		if profile.PhotoFileID != "" {
			photoMsg := tgbotapi.NewPhoto(message.Chat.ID, tgbotapi.FileID(profile.PhotoFileID))
			photoMsg.Caption = caption
			bot.Send(photoMsg)
		} else {
			bot.Send(tgbotapi.NewMessage(message.Chat.ID, caption))
		}
	}
}

// showProfileByID –≤—ã–≤–æ–¥–∏—Ç –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É ID.
func showProfileByID(bot *tgbotapi.BotAPI, message *tgbotapi.Message, profileID string) {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	objID, err := primitive.ObjectIDFromHex(profileID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–π–¥–∏ –∞–Ω–∫–µ—Ç—ã."))
		return
	}
	filter := bson.M{"_id": objID}
	var profile models.UserProfile
	err = userCollection.FindOne(ctx, filter).Decode(&profile)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ê–Ω–∫–µ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))
		return
	}
	caption := fmt.Sprintf(
		"–ò–º—è: %s\n–†–∞—Å–∞: %s\n–í–æ–∑—Ä–∞—Å—Ç: %s\n–†–æ—Å—Ç –∏ –≤–µ—Å: %s\n–ü–æ–ª: %s\n–†–∞–Ω–≥: %s\n–ö–æ–º–∞–Ω–¥–∞: %s\n–û–±–ª–æ–º–∫–∏: %d\n–ü–∏–∞—Å—Ç—Ä—ã: %d\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: %s",
		profile.Name, profile.Race, profile.Age, profile.HeightWeight,
		profile.Gender, profile.Rank, profile.Team, profile.Oblomki,
		profile.Piastry, profile.Inventory,
	)
	if profile.PhotoFileID != "" {
		photoMsg := tgbotapi.NewPhoto(message.Chat.ID, tgbotapi.FileID(profile.PhotoFileID))
		photoMsg.Caption = caption
		bot.Send(photoMsg)
	} else {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, caption))
	}
}

// handleCheckLog –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "—á–µ–∫ –ª–æ–≥ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü)"
// –∏ –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ logs –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
func handleCheckLog(bot *tgbotapi.BotAPI, message *tgbotapi.Message, duration time.Duration) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	since := time.Now().Add(-duration)
	filter := bson.M{"date": bson.M{"$gte": since}}
	cursor, err := logsCollection.Find(ctx, filter)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤."))
		return
	}
	defer cursor.Close(ctx)
	var result strings.Builder
	for cursor.Next(ctx) {
		var event struct {
			Date         time.Time `bson:"date"`
			Name         string    `bson:"name"`
			Username     string    `bson:"username"`
			ChangeAmount int       `bson:"change_amount"`
			Resource     string    `bson:"resource"`
		}
		if err := cursor.Decode(&event); err != nil {
			continue
		}
		dateStr := event.Date.Format("02.01.2006 15:04")
		result.WriteString(fmt.Sprintf("%s, %s, @%s, %d, %s\n", dateStr, event.Name, event.Username, event.ChangeAmount, event.Resource))
	}
	logText := result.String()
	if strings.TrimSpace(logText) == "" {
		logText = "–ù–µ—Ç –ª–æ–≥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
	}
	bot.Send(tgbotapi.NewMessage(message.Chat.ID, logText))
}

// HandleAdminCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:
// "—Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç", "–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç", "–∞–Ω–∫–µ—Ç–∞ (–∞–π–¥–∏ –∞–Ω–∫–µ—Ç—ã)",
// "–¥–∞—Ç—å–∞–¥–º–∏–Ω @username", "–∂–∏–≤–æ–π", "—á–µ–∫ –ª–æ–≥ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü)".
func HandleAdminCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	if !IsUserAdmin(message) {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–∏–≤–æ–¥–∏–º –µ—ë –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
	cmd := strings.TrimSpace(message.Text)
	lowerCmd := strings.ToLower(cmd)
	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É, —É–¥–∞–ª—è—è –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏
	// –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ "–Ω–∞—á–∞—Ç—å –∏–≤–µ–Ω—Ç" —Ç–∞–∫ –∂–µ, –∫–∞–∫ "–Ω–∞—á–∞—Ç—å–∏–≤–µ–Ω—Ç"
	normalizedCmd := strings.ReplaceAll(lowerCmd, " ", "")

	switch {
	case strings.HasPrefix(normalizedCmd, "–Ω–∞—á–∞—Ç—å–∏–≤–µ–Ω—Ç"):
		// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞.
		HandleCreateEvent(bot, message)
	case strings.EqualFold(lowerCmd, "–∂–∏–≤–æ–π"):
		resetRegistrationSessions()
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "—Å—ç—Ä, –¥–∞, —Å—ç—Ä!"))
	case strings.EqualFold(lowerCmd, "—Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç"):
		listProfiles(bot, message)
	case strings.EqualFold(lowerCmd, "–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç"):
		fullListProfiles(bot, message)
	case strings.HasPrefix(lowerCmd, "–∞–Ω–∫–µ—Ç–∞ "):
		parts := strings.Fields(cmd)
		if len(parts) < 2 {
			bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –∞–Ω–∫–µ—Ç—ã. –ü—Ä–∏–º–µ—Ä: –∞–Ω–∫–µ—Ç–∞ 603c2f..."))
			return
		}
		showProfileByID(bot, message, parts[1])
	case strings.HasPrefix(lowerCmd, "–¥–∞—Ç—å–∞–¥–º–∏–Ω"):
		parts := strings.Fields(message.Text)
		if len(parts) < 2 {
			bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: –¥–∞—Ç—å–∞–¥–º–∏–Ω @username"))
			return
		}
		targetUsername := strings.TrimPrefix(parts[1], "@")
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		filter := bson.M{"username": targetUsername}
		var profile models.UserProfile
		err := userCollection.FindOne(ctx, filter).Decode(&profile)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."))
			return
		}
		err = MarkUserAsAdmin(profile.TelegramID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."))
			return
		}
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", targetUsername)))
	case strings.HasPrefix(lowerCmd, "—á–µ–∫ –ª–æ–≥"):
		parts := strings.Fields(cmd)
		if len(parts) < 3 {
			bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ª–æ–≥–æ–≤: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è –∏–ª–∏ –º–µ—Å—è—Ü. –ü—Ä–∏–º–µ—Ä: —á–µ–∫ –ª–æ–≥ –¥–µ–Ω—å"))
			return
		}
		period := strings.ToLower(parts[2])
		var duration time.Duration
		switch period {
		case "–¥–µ–Ω—å":
			duration = 24 * time.Hour
		case "–Ω–µ–¥–µ–ª—è":
			duration = 7 * 24 * time.Hour
		case "–º–µ—Å—è—Ü":
			duration = 30 * 24 * time.Hour
		default:
			bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è –∏–ª–∏ –º–µ—Å—è—Ü."))
			return
		}
		handleCheckLog(bot, message, duration)
	default:
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞."))
	}
}
